// automatically generated by the FlatBuffers compiler, do not modify

package com.lion.flatbuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FbEsTapAPIQuoteWhole extends Table {
  public static FbEsTapAPIQuoteWhole getRootAsFbEsTapAPIQuoteWhole(ByteBuffer _bb) { return getRootAsFbEsTapAPIQuoteWhole(_bb, new FbEsTapAPIQuoteWhole()); }
  public static FbEsTapAPIQuoteWhole getRootAsFbEsTapAPIQuoteWhole(ByteBuffer _bb, FbEsTapAPIQuoteWhole obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public FbEsTapAPIQuoteWhole __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FbEsTapAPIContract Contract() { return Contract(new FbEsTapAPIContract()); }
  public FbEsTapAPIContract Contract(FbEsTapAPIContract obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public String CurrencyNo() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer CurrencyNoAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public byte TradingState() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String DateTimeStamp() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer DateTimeStampAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public float QPreClosingPrice() { int o = __offset(12); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QPreSettlePrice() { int o = __offset(14); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long QPrePositionQty() { int o = __offset(16); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float QOpeningPrice() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QLastPrice() { int o = __offset(20); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QHighPrice() { int o = __offset(22); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QLowPrice() { int o = __offset(24); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QHisHighPrice() { int o = __offset(26); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QHisLowPrice() { int o = __offset(28); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QLimitUpPrice() { int o = __offset(30); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QLimitDownPrice() { int o = __offset(32); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long QTotalQty() { int o = __offset(34); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float QTotalTurnover() { int o = __offset(36); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long QPositionQty() { int o = __offset(38); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float QAveragePrice() { int o = __offset(40); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QClosingPrice() { int o = __offset(42); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QSettlePrice() { int o = __offset(44); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long QLastQty() { int o = __offset(46); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float QBidPrice(int j) { int o = __offset(48); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int QBidPriceLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer QBidPriceAsByteBuffer() { return __vector_as_bytebuffer(48, 4); }
  public long QBidQty(int j) { int o = __offset(50); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int QBidQtyLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer QBidQtyAsByteBuffer() { return __vector_as_bytebuffer(50, 8); }
  public float QAskPrice(int j) { int o = __offset(52); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int QAskPriceLength() { int o = __offset(52); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer QAskPriceAsByteBuffer() { return __vector_as_bytebuffer(52, 4); }
  public long QAskQty(int j) { int o = __offset(54); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int QAskQtyLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer QAskQtyAsByteBuffer() { return __vector_as_bytebuffer(54, 8); }
  public float QImpliedBidPrice() { int o = __offset(56); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long QImpliedBidQty() { int o = __offset(58); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float QImpliedAskPrice() { int o = __offset(60); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long QImpliedAskQty() { int o = __offset(62); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float QPreDelta() { int o = __offset(64); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QCurrDelta() { int o = __offset(66); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long QInsideQty() { int o = __offset(68); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long QOutsideQty() { int o = __offset(70); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float QTurnoverRate() { int o = __offset(72); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long Q5DAvgQty() { int o = __offset(74); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float QPERatio() { int o = __offset(76); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QTotalValue() { int o = __offset(78); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QNegotiableValue() { int o = __offset(80); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long QPositionTrend() { int o = __offset(82); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public float QChangeSpeed() { int o = __offset(84); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QChangeRate() { int o = __offset(86); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QChangeValue() { int o = __offset(88); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float QSwing() { int o = __offset(90); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public long QTotalBidQty() { int o = __offset(92); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long QTotalAskQty() { int o = __offset(94); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public FbEsTapAPIContract UnderlyContract() { return UnderlyContract(new FbEsTapAPIContract()); }
  public FbEsTapAPIContract UnderlyContract(FbEsTapAPIContract obj) { int o = __offset(96); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createFbEsTapAPIQuoteWhole(FlatBufferBuilder builder,
      int ContractOffset,
      int CurrencyNoOffset,
      byte TradingState,
      int DateTimeStampOffset,
      float QPreClosingPrice,
      float QPreSettlePrice,
      long QPrePositionQty,
      float QOpeningPrice,
      float QLastPrice,
      float QHighPrice,
      float QLowPrice,
      float QHisHighPrice,
      float QHisLowPrice,
      float QLimitUpPrice,
      float QLimitDownPrice,
      long QTotalQty,
      float QTotalTurnover,
      long QPositionQty,
      float QAveragePrice,
      float QClosingPrice,
      float QSettlePrice,
      long QLastQty,
      int QBidPriceOffset,
      int QBidQtyOffset,
      int QAskPriceOffset,
      int QAskQtyOffset,
      float QImpliedBidPrice,
      long QImpliedBidQty,
      float QImpliedAskPrice,
      long QImpliedAskQty,
      float QPreDelta,
      float QCurrDelta,
      long QInsideQty,
      long QOutsideQty,
      float QTurnoverRate,
      long Q5DAvgQty,
      float QPERatio,
      float QTotalValue,
      float QNegotiableValue,
      long QPositionTrend,
      float QChangeSpeed,
      float QChangeRate,
      float QChangeValue,
      float QSwing,
      long QTotalBidQty,
      long QTotalAskQty,
      int UnderlyContractOffset) {
    builder.startObject(47);
    FbEsTapAPIQuoteWhole.addQTotalAskQty(builder, QTotalAskQty);
    FbEsTapAPIQuoteWhole.addQTotalBidQty(builder, QTotalBidQty);
    FbEsTapAPIQuoteWhole.addQPositionTrend(builder, QPositionTrend);
    FbEsTapAPIQuoteWhole.addQ5DAvgQty(builder, Q5DAvgQty);
    FbEsTapAPIQuoteWhole.addQOutsideQty(builder, QOutsideQty);
    FbEsTapAPIQuoteWhole.addQInsideQty(builder, QInsideQty);
    FbEsTapAPIQuoteWhole.addQImpliedAskQty(builder, QImpliedAskQty);
    FbEsTapAPIQuoteWhole.addQImpliedBidQty(builder, QImpliedBidQty);
    FbEsTapAPIQuoteWhole.addQLastQty(builder, QLastQty);
    FbEsTapAPIQuoteWhole.addQPositionQty(builder, QPositionQty);
    FbEsTapAPIQuoteWhole.addQTotalQty(builder, QTotalQty);
    FbEsTapAPIQuoteWhole.addQPrePositionQty(builder, QPrePositionQty);
    FbEsTapAPIQuoteWhole.addUnderlyContract(builder, UnderlyContractOffset);
    FbEsTapAPIQuoteWhole.addQSwing(builder, QSwing);
    FbEsTapAPIQuoteWhole.addQChangeValue(builder, QChangeValue);
    FbEsTapAPIQuoteWhole.addQChangeRate(builder, QChangeRate);
    FbEsTapAPIQuoteWhole.addQChangeSpeed(builder, QChangeSpeed);
    FbEsTapAPIQuoteWhole.addQNegotiableValue(builder, QNegotiableValue);
    FbEsTapAPIQuoteWhole.addQTotalValue(builder, QTotalValue);
    FbEsTapAPIQuoteWhole.addQPERatio(builder, QPERatio);
    FbEsTapAPIQuoteWhole.addQTurnoverRate(builder, QTurnoverRate);
    FbEsTapAPIQuoteWhole.addQCurrDelta(builder, QCurrDelta);
    FbEsTapAPIQuoteWhole.addQPreDelta(builder, QPreDelta);
    FbEsTapAPIQuoteWhole.addQImpliedAskPrice(builder, QImpliedAskPrice);
    FbEsTapAPIQuoteWhole.addQImpliedBidPrice(builder, QImpliedBidPrice);
    FbEsTapAPIQuoteWhole.addQAskQty(builder, QAskQtyOffset);
    FbEsTapAPIQuoteWhole.addQAskPrice(builder, QAskPriceOffset);
    FbEsTapAPIQuoteWhole.addQBidQty(builder, QBidQtyOffset);
    FbEsTapAPIQuoteWhole.addQBidPrice(builder, QBidPriceOffset);
    FbEsTapAPIQuoteWhole.addQSettlePrice(builder, QSettlePrice);
    FbEsTapAPIQuoteWhole.addQClosingPrice(builder, QClosingPrice);
    FbEsTapAPIQuoteWhole.addQAveragePrice(builder, QAveragePrice);
    FbEsTapAPIQuoteWhole.addQTotalTurnover(builder, QTotalTurnover);
    FbEsTapAPIQuoteWhole.addQLimitDownPrice(builder, QLimitDownPrice);
    FbEsTapAPIQuoteWhole.addQLimitUpPrice(builder, QLimitUpPrice);
    FbEsTapAPIQuoteWhole.addQHisLowPrice(builder, QHisLowPrice);
    FbEsTapAPIQuoteWhole.addQHisHighPrice(builder, QHisHighPrice);
    FbEsTapAPIQuoteWhole.addQLowPrice(builder, QLowPrice);
    FbEsTapAPIQuoteWhole.addQHighPrice(builder, QHighPrice);
    FbEsTapAPIQuoteWhole.addQLastPrice(builder, QLastPrice);
    FbEsTapAPIQuoteWhole.addQOpeningPrice(builder, QOpeningPrice);
    FbEsTapAPIQuoteWhole.addQPreSettlePrice(builder, QPreSettlePrice);
    FbEsTapAPIQuoteWhole.addQPreClosingPrice(builder, QPreClosingPrice);
    FbEsTapAPIQuoteWhole.addDateTimeStamp(builder, DateTimeStampOffset);
    FbEsTapAPIQuoteWhole.addCurrencyNo(builder, CurrencyNoOffset);
    FbEsTapAPIQuoteWhole.addContract(builder, ContractOffset);
    FbEsTapAPIQuoteWhole.addTradingState(builder, TradingState);
    return FbEsTapAPIQuoteWhole.endFbEsTapAPIQuoteWhole(builder);
  }

  public static void startFbEsTapAPIQuoteWhole(FlatBufferBuilder builder) { builder.startObject(47); }
  public static void addContract(FlatBufferBuilder builder, int ContractOffset) { builder.addOffset(0, ContractOffset, 0); }
  public static void addCurrencyNo(FlatBufferBuilder builder, int CurrencyNoOffset) { builder.addOffset(1, CurrencyNoOffset, 0); }
  public static void addTradingState(FlatBufferBuilder builder, byte TradingState) { builder.addByte(2, TradingState, 0); }
  public static void addDateTimeStamp(FlatBufferBuilder builder, int DateTimeStampOffset) { builder.addOffset(3, DateTimeStampOffset, 0); }
  public static void addQPreClosingPrice(FlatBufferBuilder builder, float QPreClosingPrice) { builder.addFloat(4, QPreClosingPrice, 0.0f); }
  public static void addQPreSettlePrice(FlatBufferBuilder builder, float QPreSettlePrice) { builder.addFloat(5, QPreSettlePrice, 0.0f); }
  public static void addQPrePositionQty(FlatBufferBuilder builder, long QPrePositionQty) { builder.addLong(6, QPrePositionQty, 0L); }
  public static void addQOpeningPrice(FlatBufferBuilder builder, float QOpeningPrice) { builder.addFloat(7, QOpeningPrice, 0.0f); }
  public static void addQLastPrice(FlatBufferBuilder builder, float QLastPrice) { builder.addFloat(8, QLastPrice, 0.0f); }
  public static void addQHighPrice(FlatBufferBuilder builder, float QHighPrice) { builder.addFloat(9, QHighPrice, 0.0f); }
  public static void addQLowPrice(FlatBufferBuilder builder, float QLowPrice) { builder.addFloat(10, QLowPrice, 0.0f); }
  public static void addQHisHighPrice(FlatBufferBuilder builder, float QHisHighPrice) { builder.addFloat(11, QHisHighPrice, 0.0f); }
  public static void addQHisLowPrice(FlatBufferBuilder builder, float QHisLowPrice) { builder.addFloat(12, QHisLowPrice, 0.0f); }
  public static void addQLimitUpPrice(FlatBufferBuilder builder, float QLimitUpPrice) { builder.addFloat(13, QLimitUpPrice, 0.0f); }
  public static void addQLimitDownPrice(FlatBufferBuilder builder, float QLimitDownPrice) { builder.addFloat(14, QLimitDownPrice, 0.0f); }
  public static void addQTotalQty(FlatBufferBuilder builder, long QTotalQty) { builder.addLong(15, QTotalQty, 0L); }
  public static void addQTotalTurnover(FlatBufferBuilder builder, float QTotalTurnover) { builder.addFloat(16, QTotalTurnover, 0.0f); }
  public static void addQPositionQty(FlatBufferBuilder builder, long QPositionQty) { builder.addLong(17, QPositionQty, 0L); }
  public static void addQAveragePrice(FlatBufferBuilder builder, float QAveragePrice) { builder.addFloat(18, QAveragePrice, 0.0f); }
  public static void addQClosingPrice(FlatBufferBuilder builder, float QClosingPrice) { builder.addFloat(19, QClosingPrice, 0.0f); }
  public static void addQSettlePrice(FlatBufferBuilder builder, float QSettlePrice) { builder.addFloat(20, QSettlePrice, 0.0f); }
  public static void addQLastQty(FlatBufferBuilder builder, long QLastQty) { builder.addLong(21, QLastQty, 0L); }
  public static void addQBidPrice(FlatBufferBuilder builder, int QBidPriceOffset) { builder.addOffset(22, QBidPriceOffset, 0); }
  public static int createQBidPriceVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startQBidPriceVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addQBidQty(FlatBufferBuilder builder, int QBidQtyOffset) { builder.addOffset(23, QBidQtyOffset, 0); }
  public static int createQBidQtyVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startQBidQtyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addQAskPrice(FlatBufferBuilder builder, int QAskPriceOffset) { builder.addOffset(24, QAskPriceOffset, 0); }
  public static int createQAskPriceVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startQAskPriceVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addQAskQty(FlatBufferBuilder builder, int QAskQtyOffset) { builder.addOffset(25, QAskQtyOffset, 0); }
  public static int createQAskQtyVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startQAskQtyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static void addQImpliedBidPrice(FlatBufferBuilder builder, float QImpliedBidPrice) { builder.addFloat(26, QImpliedBidPrice, 0.0f); }
  public static void addQImpliedBidQty(FlatBufferBuilder builder, long QImpliedBidQty) { builder.addLong(27, QImpliedBidQty, 0L); }
  public static void addQImpliedAskPrice(FlatBufferBuilder builder, float QImpliedAskPrice) { builder.addFloat(28, QImpliedAskPrice, 0.0f); }
  public static void addQImpliedAskQty(FlatBufferBuilder builder, long QImpliedAskQty) { builder.addLong(29, QImpliedAskQty, 0L); }
  public static void addQPreDelta(FlatBufferBuilder builder, float QPreDelta) { builder.addFloat(30, QPreDelta, 0.0f); }
  public static void addQCurrDelta(FlatBufferBuilder builder, float QCurrDelta) { builder.addFloat(31, QCurrDelta, 0.0f); }
  public static void addQInsideQty(FlatBufferBuilder builder, long QInsideQty) { builder.addLong(32, QInsideQty, 0L); }
  public static void addQOutsideQty(FlatBufferBuilder builder, long QOutsideQty) { builder.addLong(33, QOutsideQty, 0L); }
  public static void addQTurnoverRate(FlatBufferBuilder builder, float QTurnoverRate) { builder.addFloat(34, QTurnoverRate, 0.0f); }
  public static void addQ5DAvgQty(FlatBufferBuilder builder, long Q5DAvgQty) { builder.addLong(35, Q5DAvgQty, 0L); }
  public static void addQPERatio(FlatBufferBuilder builder, float QPERatio) { builder.addFloat(36, QPERatio, 0.0f); }
  public static void addQTotalValue(FlatBufferBuilder builder, float QTotalValue) { builder.addFloat(37, QTotalValue, 0.0f); }
  public static void addQNegotiableValue(FlatBufferBuilder builder, float QNegotiableValue) { builder.addFloat(38, QNegotiableValue, 0.0f); }
  public static void addQPositionTrend(FlatBufferBuilder builder, long QPositionTrend) { builder.addLong(39, QPositionTrend, 0L); }
  public static void addQChangeSpeed(FlatBufferBuilder builder, float QChangeSpeed) { builder.addFloat(40, QChangeSpeed, 0.0f); }
  public static void addQChangeRate(FlatBufferBuilder builder, float QChangeRate) { builder.addFloat(41, QChangeRate, 0.0f); }
  public static void addQChangeValue(FlatBufferBuilder builder, float QChangeValue) { builder.addFloat(42, QChangeValue, 0.0f); }
  public static void addQSwing(FlatBufferBuilder builder, float QSwing) { builder.addFloat(43, QSwing, 0.0f); }
  public static void addQTotalBidQty(FlatBufferBuilder builder, long QTotalBidQty) { builder.addLong(44, QTotalBidQty, 0L); }
  public static void addQTotalAskQty(FlatBufferBuilder builder, long QTotalAskQty) { builder.addLong(45, QTotalAskQty, 0L); }
  public static void addUnderlyContract(FlatBufferBuilder builder, int UnderlyContractOffset) { builder.addOffset(46, UnderlyContractOffset, 0); }
  public static int endFbEsTapAPIQuoteWhole(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishFbEsTapAPIQuoteWholeBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
}

